"""
This type stub file was generated by pyright.
"""

import json
from collections.abc import Mapping, Sequence
from contextlib import suppress
from pathlib import PurePath
from typing import Any, Callable, ClassVar, Optional
from .registry import _import_class, get_filesystem_class
from .spec import AbstractFileSystem

class FilesystemJSONEncoder(json.JSONEncoder):
    include_password: ClassVar[bool] = ...
    def default(self, o: Any) -> Any:
        ...
    
    def make_serializable(self, obj: Any) -> Any:
        """
        Recursively converts an object so that it can be JSON serialized via
        :func:`json.dumps` and :func:`json.dump`, without actually calling
        said functions.
        """
        ...
    


class FilesystemJSONDecoder(json.JSONDecoder):
    def __init__(self, *, object_hook: Optional[Callable[[dict[str, Any]], Any]] = ..., parse_float: Optional[Callable[[str], Any]] = ..., parse_int: Optional[Callable[[str], Any]] = ..., parse_constant: Optional[Callable[[str], Any]] = ..., strict: bool = ..., object_pairs_hook: Optional[Callable[[list[tuple[str, Any]]], Any]] = ...) -> None:
        ...
    
    @classmethod
    def try_resolve_path_cls(cls, dct: dict[str, Any]): # -> type[PurePath] | None:
        ...
    
    @classmethod
    def try_resolve_fs_cls(cls, dct: dict[str, Any]): # -> type[AbstractFileSystem] | type | None:
        ...
    
    def custom_object_hook(self, dct: dict[str, Any]): # -> AbstractFileSystem | PurePath | Any | dict[str, Any]:
        ...
    
    def unmake_serializable(self, obj: Any) -> Any:
        """
        Inverse function of :meth:`FilesystemJSONEncoder.make_serializable`.
        """
        ...
    


