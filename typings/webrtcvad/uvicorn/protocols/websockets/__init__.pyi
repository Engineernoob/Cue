"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
import wsproto
from typing import Any, Literal, cast
from urllib.parse import unquote
from wsproto import ConnectionType, events
from wsproto.connection import ConnectionState
from wsproto.extensions import Extension, PerMessageDeflate
from wsproto.utilities import LocalProtocolError, RemoteProtocolError
from uvicorn._types import ASGI3Application, ASGISendEvent, WebSocketAcceptEvent, WebSocketCloseEvent, WebSocketEvent, WebSocketResponseBodyEvent, WebSocketResponseStartEvent, WebSocketScope, WebSocketSendEvent
from uvicorn.config import Config
from uvicorn.logging import TRACE_LOG_LEVEL
from uvicorn.protocols.utils import ClientDisconnected, get_client_addr, get_local_addr, get_path_with_query_string, get_remote_addr, is_ssl
from uvicorn.server import ServerState

class WSProtocol(asyncio.Protocol):
    def __init__(self, config: Config, server_state: ServerState, app_state: dict[str, Any], _loop: asyncio.AbstractEventLoop | None = ...) -> None:
        ...
    
    def connection_made(self, transport: asyncio.Transport) -> None:
        ...
    
    def connection_lost(self, exc: Exception | None) -> None:
        ...
    
    def eof_received(self) -> None:
        ...
    
    def data_received(self, data: bytes) -> None:
        ...
    
    def handle_events(self) -> None:
        ...
    
    def pause_writing(self) -> None:
        """
        Called by the transport when the write buffer exceeds the high water mark.
        """
        ...
    
    def resume_writing(self) -> None:
        """
        Called by the transport when the write buffer drops below the low water mark.
        """
        ...
    
    def shutdown(self) -> None:
        ...
    
    def on_task_complete(self, task: asyncio.Task[None]) -> None:
        ...
    
    def handle_connect(self, event: events.Request) -> None:
        ...
    
    def handle_text(self, event: events.TextMessage) -> None:
        ...
    
    def handle_bytes(self, event: events.BytesMessage) -> None:
        ...
    
    def handle_close(self, event: events.CloseConnection) -> None:
        ...
    
    def handle_ping(self, event: events.Ping) -> None:
        ...
    
    def send_500_response(self) -> None:
        ...
    
    async def run_asgi(self) -> None:
        ...
    
    async def send(self, message: ASGISendEvent) -> None:
        ...
    
    async def receive(self) -> WebSocketEvent:
        ...
    


