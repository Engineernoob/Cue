"""
This type stub file was generated by pyright.
"""

import inspect
import io
import re
import warnings
from dataclasses import dataclass
from math import ceil
from os.path import getsize
from pathlib import Path
from typing import BinaryIO, Dict, Iterable, List, Optional, TYPE_CHECKING, Tuple, TypedDict
from urllib.parse import unquote
from huggingface_hub import constants
from .utils import build_hf_headers, fix_hf_endpoint_in_url, get_session, hf_raise_for_status, http_backoff, logging, tqdm, validate_hf_hub_args
from .utils._lfs import SliceFileObj
from .utils.sha import sha256, sha_fileobj
from .utils.tqdm import is_tqdm_disabled
from ._commit_api import CommitOperationAdd

"""Git LFS related type definitions and utilities"""
if TYPE_CHECKING:
    ...
logger = ...
OID_REGEX = ...
LFS_MULTIPART_UPLOAD_COMMAND = ...
LFS_HEADERS = ...
@dataclass
class UploadInfo:
    """
    Dataclass holding required information to determine whether a blob
    should be uploaded to the hub using the LFS protocol or the regular protocol

    Args:
        sha256 (`bytes`):
            SHA256 hash of the blob
        size (`int`):
            Size in bytes of the blob
        sample (`bytes`):
            First 512 bytes of the blob
    """
    sha256: bytes
    size: int
    sample: bytes
    @classmethod
    def from_path(cls, path: str): # -> Self:
        ...
    
    @classmethod
    def from_bytes(cls, data: bytes): # -> Self:
        ...
    
    @classmethod
    def from_fileobj(cls, fileobj: BinaryIO): # -> Self:
        ...
    


@validate_hf_hub_args
def post_lfs_batch_info(upload_infos: Iterable[UploadInfo], token: Optional[str], repo_type: str, repo_id: str, revision: Optional[str] = ..., endpoint: Optional[str] = ..., headers: Optional[Dict[str, str]] = ...) -> Tuple[List[dict], List[dict]]:
    """
    Requests the LFS batch endpoint to retrieve upload instructions

    Learn more: https://github.com/git-lfs/git-lfs/blob/main/docs/api/batch.md

    Args:
        upload_infos (`Iterable` of `UploadInfo`):
            `UploadInfo` for the files that are being uploaded, typically obtained
            from `CommitOperationAdd.upload_info`
        repo_type (`str`):
            Type of the repo to upload to: `"model"`, `"dataset"` or `"space"`.
        repo_id (`str`):
            A namespace (user or an organization) and a repo name separated
            by a `/`.
        revision (`str`, *optional*):
            The git revision to upload to.
        headers (`dict`, *optional*):
            Additional headers to include in the request

    Returns:
        `LfsBatchInfo`: 2-tuple:
            - First element is the list of upload instructions from the server
            - Second element is an list of errors, if any

    Raises:
        [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
            If an argument is invalid or the server response is malformed.
        [`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
            If the server returned an error.
    """
    ...

class PayloadPartT(TypedDict):
    partNumber: int
    etag: str
    ...


class CompletionPayloadT(TypedDict):
    """Payload that will be sent to the Hub when uploading multi-part."""
    oid: str
    parts: List[PayloadPartT]
    ...


def lfs_upload(operation: CommitOperationAdd, lfs_batch_action: Dict, token: Optional[str] = ..., headers: Optional[Dict[str, str]] = ..., endpoint: Optional[str] = ...) -> None:
    """
    Handles uploading a given object to the Hub with the LFS protocol.

    Can be a No-op if the content of the file is already present on the hub large file storage.

    Args:
        operation (`CommitOperationAdd`):
            The add operation triggering this upload.
        lfs_batch_action (`dict`):
            Upload instructions from the LFS batch endpoint for this object. See [`~utils.lfs.post_lfs_batch_info`] for
            more details.
        headers (`dict`, *optional*):
            Headers to include in the request, including authentication and user agent headers.

    Raises:
        [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
            If `lfs_batch_action` is improperly formatted
        [`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
            If the upload resulted in an error
    """
    ...

