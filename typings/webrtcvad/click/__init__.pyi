"""
This type stub file was generated by pyright.
"""

import collections.abc as cabc
import io
import sys
import time
import typing as t
import msvcrt
from ctypes import Array, POINTER, Structure, WINFUNCTYPE, byref, c_char, c_char_p, c_int, c_ssize_t, c_ulong, c_void_p, py_object, pythonapi, windll
from ctypes.wintypes import DWORD, HANDLE, LPCWSTR, LPWSTR
from ._compat import _NonClosingTextIOWrapper
from collections.abc import Buffer

c_ssize_p = ...
kernel32 = ...
GetStdHandle = ...
ReadConsoleW = ...
WriteConsoleW = ...
GetConsoleMode = ...
GetLastError = ...
GetCommandLineW = ...
CommandLineToArgvW = ...
LocalFree = ...
STDIN_HANDLE = ...
STDOUT_HANDLE = ...
STDERR_HANDLE = ...
PyBUF_SIMPLE = ...
PyBUF_WRITABLE = ...
ERROR_SUCCESS = ...
ERROR_NOT_ENOUGH_MEMORY = ...
ERROR_OPERATION_ABORTED = ...
STDIN_FILENO = ...
STDOUT_FILENO = ...
STDERR_FILENO = ...
EOF = ...
MAX_BYTES_WRITTEN = ...
if t.TYPE_CHECKING:
    ...
class _WindowsConsoleRawIOBase(io.RawIOBase):
    def __init__(self, handle: int | None) -> None:
        ...
    
    def isatty(self) -> t.Literal[True]:
        ...
    


class _WindowsConsoleReader(_WindowsConsoleRawIOBase):
    def readable(self) -> t.Literal[True]:
        ...
    
    def readinto(self, b: Buffer) -> int:
        ...
    


class _WindowsConsoleWriter(_WindowsConsoleRawIOBase):
    def writable(self) -> t.Literal[True]:
        ...
    
    def write(self, b: Buffer) -> int:
        ...
    


class ConsoleStream:
    def __init__(self, text_stream: t.TextIO, byte_stream: t.BinaryIO) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    def write(self, x: t.AnyStr) -> int:
        ...
    
    def writelines(self, lines: cabc.Iterable[t.AnyStr]) -> None:
        ...
    
    def __getattr__(self, name: str) -> t.Any:
        ...
    
    def isatty(self) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    


_stream_factories: cabc.Mapping[int, t.Callable[[t.BinaryIO], t.TextIO]] = ...
